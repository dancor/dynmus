plan
- dynamic music
  - possibly eventually for game integration
  - but hopefully still an external somewhat-general library?
- probabilistic
  - and "totally random" possibly even decent fallback, if all other
    computation not ready in time etc
- slider kinds of inputs?
  - what will these look like
    - mood
      - sad vs happy
    - simple vs complex?
    - tonal vs atonal?
    - consonant vs dissonant?
    - eerieness?
    - intensity?
    - general speed
    - meter
- grammar of tonal harmony progressions and transpositions?
- should try to build on what it has played
  - try to have reuse things to be interesting and musical
    - sequences
    - formats, more or less strict
      - can't be too strict to fit into probabilistic model
      - fugue?
  - try to use strategies from human improv technique?
    - nothing should seem like an accident
    - but improvisers
- make use of compositional techniques
  - again, sequences
- lots of things are hard
  - e.g. when are long silences ok
    (after cadences etc..)

sound libraries
- c
  - libsox
    - primarily: read and write different formats
    - apply various effects
    - play and record
  - portaudio
    - primarily: c callback -> play
    - play and record (raw audio only)
  - csound
    - simple music programming system
    - instruments _then_ notes
      - so not going to work with dynamic instruments
      - but maybe modifiable or lib bindings can already be more flex?
    - lots of contributed instrumentation
  - supercollider
    - more advanced programming system than csound
    - so probably just overhead if wrapping in hs frontend stuff?  idk..
- haskell
  - haskore
    - large (slow?) library for representing music
  - hamusic
    - more lightweight alternative to haskore?

